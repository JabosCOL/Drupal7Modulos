<?php

/**
 * @file
 * Employees.install.
 * Adds a taxonomy with 3 associated terms.
 */

/**
 * Implements create_taxonomy().
 */
function employees_create_taxonomy() {
  $vocab_items = [
    'name' => 'Salary type',
    'description' => 'Contents information about salary types',
    // Machine_name es un campo de la tabla taxonomy_vocabulary.
    'machine_name' => 'salary_type_vocab',
    // Podemos indicar el id y traerlo con taxonomy_vocabulary_load?
  ];

  $new_vocab = new stdClass();
  $new_vocab->name = $vocab_items['name'];
  $new_vocab->description = $vocab_items['description'];
  $new_vocab->machine_name = $vocab_items['machine_name'];

  // Esta función trae el objeto con base al campo machine_name.
  $vocab = taxonomy_vocabulary_machine_name_load('salary_type_vocab');
  $t = get_t();

  if ($vocab == NULL) {
    taxonomy_vocabulary_save($new_vocab);
  }
  else {
    drupal_set_message($t('An error occurred, the taxonomy already exist.'), 'error');
  }

  // Instancia: cada nuevo objeto creado apartir de las clases.
  // Objeto y array multidireccional porque tiene más arrays dentro del mismo.
  $terms = [
    // clase: sirve para representar conceptos o entidades.
    // este es otro objeto?
    'term1' => [
      // Low salary representa el atributo de la clase.
      'name' => 'Low salary',
      'description' => 'These are the lowest salaries',
    ],
    'term2' => [
      'name' => 'Medium salary',
      'description' => 'These are the avarage salaries',
    ],
    'term3' => [
      'name' => 'High salary',
      'description' => 'These are the highest salaries',
    ],
  ];

  $vocab = taxonomy_vocabulary_machine_name_load('salary_type_vocab');
  foreach ($terms as $term) {
    // Creación de un objeto vacío(stdClass).
    $add_term = new stdClass();
    // Se le asignan clases y atributos al objeto vacío.
    $add_term->name = $term['name'];
    $add_term->description = $term['description'];
    $add_term->vid = $vocab->vid;
    // Aquí estoy instanciando?
    taxonomy_term_save($add_term);
  }
}

/**
 * Implements create_content_type().
 */
function employees_create_content_type() {
  // $t significa que ese texto puede ser traducido.
  $t = get_t();
  $vocab = taxonomy_vocabulary_machine_name_load('salary_type_vocab');
  // Implements new content type..
  $content_type = array(
    'type' => 'employees',
    'name' => $t('Employees'),
    'description' => $t('add new employee'),
    'title_label' => $t("employee's name"),
    'base' => 'node_content',
  );

  $node_type = node_type_set_defaults($content_type);

  node_type_save($node_type);
  $fields = array(

    'employee_id' => array(
      'field_name' => 'employee_id',
      'type' => 'text',
      // Cambiarlo a text.
    ),

    'employee_age' => array(
      'field_name' => 'employee_age',
      'type' => 'number_integer',
      // Cambiarlo a integer.
    ),

    'employee_salary_type' => array(
      'field_name' => 'employee_salary_type',
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocab->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    ),
  );

  foreach ($fields as $field) {
    field_create_field($field);
  }

  $instances = array(
    'employee_id' => array(
      'field_name' => 'employee_id',
      'label' => $t('Employee id'),
      'required' => TRUE,
      'entity_type' => 'node',
      'bundle' => 'employees',
    ),
    'employee_age' => array(
      'field_name' => 'employee_age',
      'label' => $t('Employee age'),
      'required' => TRUE,
      'entity_type' => 'node',
      'bundle' => 'employees',
    ),
    'employee_salary_type' => array(
      'field_name' => 'employee_salary_type',
      'label' => $t('Employee salary'),
      'required' => TRUE,
      'entity_type' => 'node',
      'bundle' => 'employees',
      'widget' => array(
        'type' => 'options_select',
      ),
    ),
  );

  foreach ($instances as $instance) {
    field_create_instance($instance);
  }
}

/**
 * Implements hook_schema().
 */
function employees_schema() {
  $schema = array();
  $schema['batch_employees'] = array(
    'description' => 'Employees API URL',
    'fields' => array(
      'be_id' => array(
        'description' => 'The primary identifier for a node.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'batch_name' => array(
        'description' => 'A field for storing a batch name',
        'type' => 'varchar',
        'length' => 250,
        'not null' => TRUE,
        'default' => '',
      ),
      'URL' => array(
        'description' => 'A field for storing an API URL.',
        'type' => 'varchar',
        'length' => 250,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'employees_batch_id' => array(
        'batch_name',
      ),
    ),
    'primary key' => array(
      'be_id',
    ),
    'unique keys' => array(
      'batch_name' => array(
        'batch_name',
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function employees_install() {
  employees_create_taxonomy();
  employees_create_content_type();
  employees_schema();
}

/**
 * Implements hook_uninstall().
 */
function employees_uninstall() {
  // Delete taxonomy.
  $vocabulary = taxonomy_vocabulary_machine_name_load('salary_type_vocab');
  $terms = taxonomy_get_tree($vocabulary->vid);
  foreach ($terms as $term) {
    taxonomy_term_delete($term->tid);
  }
  taxonomy_vocabulary_delete($vocabulary->vid);
  drupal_set_message(t('Taxonomy %taxonomy has been deleted.', array('%taxonomy' => $vocabulary->name)));

  // Delete fields and instances and db recorrds.
  $fields = [
    'comment_body' => array(
      'field_name' => 'comment_body',
      'entity_type' => 'comment',
      'bundle' => 'comment_node_employees',
    ),
    'employee_id' => array(
      'field_name' => 'employee_id',
      'entity_type' => 'node',
      'bundle' => 'employees',
    ),
    'employee_age' => array(
      'field_name' => 'employee_age',
      'entity_type' => 'node',
      'bundle' => 'employees',
    ),
    'employee_salary_type' => array(
      'field_name' => 'employee_salary_type',
      'entity_type' => 'node',
      'bundle' => 'employees',
    ),
  ];

  foreach ($fields as $field) {
    if ($instance = field_info_instance($field['entity_type'], $field['field_name'], $field['bundle'])) {
      // field_delete_.... es para indicarle al cron que debe eliminar
      // esos campos.
      field_delete_instance($instance);
      $enough_range_to_delete_everything = 9999999;
      // Esto se usa porque los campos no seran eliminados de la db
      // hasta realizar un Cron.
      field_purge_batch($enough_range_to_delete_everything);
    }
  }
  drupal_set_message(t('%count fields has been deleted.', array('%count' => count($fields))));

  // Delete all nodes and content type.
  $content_type = 'employees';
  $results = db_select('node', 'n')
    ->fields('n', ['nid'])
    ->condition('type', $content_type)
    ->execute();
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }
  if (!empty($nids)) {
    node_delete_multiple($nids);
    drupal_set_message(t('%count nodes has been deleted.', array('%count' => count($nids))));
  }

  if (node_type_load($content_type)) {
    node_type_delete($content_type);
    variable_del('node_preview_' . $content_type);
    drupal_set_message(t('%content_type content type has been deleted.', array('%content_type' => $content_type)));
  }
  node_types_rebuild();
  variable_set('menu_rebuild_needed', TRUE);
}
